<div id="gfw-wrapper">
    <div data-lang="en-US">
        <h3 style="display: none;">Fetching IP information...</h3>
        <div style="display: none;">
            <h3>It might be GFWed</h3>
            <p>
                If simply refreshing the page doesn't help, this error then might be caused by the Great Firewall of China.
                You can
                <button id="new-rule-button-en-us" class="center"></button>
            </p>
        </div>
    </div>
    <div data-lang="zh-CN">
        <h3 style="display: none;">正在获取 IP 信息...</h3>
        <div style="display: none;">
            <h3>可能是被墙了</h3>
            <p>
                如果刷新页面没有用, 这个错误则可能是防火长城引起的.
                你可以
                <button id="new-rule-button-zh-cn" class="center"></button>
            </p>
        </div>
    </div>
</div>
<script>
    function require(url, callback, callbackQueryName, callbackName) {
        var head = document.getElementsByTagName("head")[0];
        var script = document.createElement("script");
        script.type = "text/javascript";
        script.async = true;
        
        if (arguments.length == 3) {
            callbackName = "callback_" + Math.floor(Math.random() * 9999999999999999);
        }

        if (callbackQueryName) {
            url += "&" + callbackQueryName + "=" + callbackName;
        }
        
        script.src = url;

        if (callbackQueryName) {
            window[callbackName] = function () {
                window[callbackName] = undefined;
                head.removeChild(script);
                callback.apply(this, arguments);
            };
        }

        head.insertBefore(script, head.firstChild);
    }
</script>
<script>
    (function () {
        //var base64 = new function () {
        //    var chars = "zL1QVy48qb=jTYPUdRgcWXfH3mA7epES5NlZFIJr+wG0anhos2vB/ik69uKtxDCMO";

        //    this.encode = function (str) {
        //        str = unescape(encodeURIComponent(str));

        //        var encoded = [];
        //        var c = 0;
        //        while (c < str.length) {
        //            var b0 = str.charCodeAt(c++);
        //            var b1 = str.charCodeAt(c++);
        //            var b2 = str.charCodeAt(c++);
        //            var buf = (b0 << 16) + ((b1 || 0) << 8) + (b2 || 0);
        //            var i0 = (buf & (63 << 18)) >> 18;
        //            var i1 = (buf & (63 << 12)) >> 12;
        //            var i2 = isNaN(b1) ? 64 : (buf & (63 << 6)) >> 6;
        //            var i3 = isNaN(b2) ? 64 : (buf & 63);
        //            encoded[encoded.length] = chars.charAt(i0);
        //            encoded[encoded.length] = chars.charAt(i1);
        //            encoded[encoded.length] = chars.charAt(i2);
        //            encoded[encoded.length] = chars.charAt(i3);
        //        }

        //        return encoded.join("");
        //    };
        //}();

        var url = window.location.href;
        var host = window.location.host;
        var ip = "@host-ip@";
        var toggle;

        //require("http://localhost:14220/transmit.ashx?config=submit-new-rule-toggle", function (value) {
        //    toggle = value;
        //}, "callback");

        var rule;
        if (window.location.protocol == "http:" && pageStatus == 502) {
            var path = location.pathname + location.search;
            var pathReStr = path == "/" ? "" : path.replace(/([\.\?\+\*\(\)\{\}\[\]\\])/g, "\\$1");
            rule = (pathReStr ? host : "." + (host.indexOf("www.") == 0 ? host.substr(4) : host)) + ":80";
        }
        else {
            rule = (/\d$/.test(host) ? "" : ".") + (host.indexOf("www.") == 0 ? host.substr(4) : host);
        }

        var lang;
        var langs = {
            "en-US": {
                buttonId: "new-rule-button-en-us",
                addAndTry: 'Add "{rule}" as custom rule and try again',
                adding: "Adding new rule...",
                addTimeout: "Adding new rule timeout, please try again.",
                //stillTrying: "Still trying... (Maybe the site itself is not accessible?)",
                doesNotWorkAndRemove: "It doesn't seem to work, click to removed this rule",
                testing: "Testing...",
                sorry: "Sorry for the pain...",
                workAndSubmitting: "It seems to work, submitting this rule...",
                refreshing: "Refreshing...",
                workAndRefreshing: "It seems to work, refreshing..."

            },
            "zh-CN": {
                buttonId: "new-rule-button-zh-cn",
                addAndTry: '添加 "{rule}" 到自定义规则并重试',
                adding: "正在添加新规则...",
                addTimeout: "添加新规则超时, 请重试.",
                //stillTrying: "努力中... (可能这个站点本身无法访问?)",
                doesNotWorkAndRemove: "似乎没有作用, 点击移除此规则",
                testing: "正在测试...",
                sorry: "表示同情...",
                workAndSubmitting: "似乎有用, 正在提交这条规则...",
                refreshing: "正在刷新...",
                workAndRefreshing: "似乎有用, 正在刷新..."
            }
        };

        var button;

        window.onlangready = function () {
            var wrapper = document.getElementById("gfw-wrapper");
            var h3 = wrapper.getElementsByTagName("h3")[0];
            var content = wrapper.getElementsByTagName("div")[0].getElementsByTagName("div")[0];

            function hideSubTitle() {
                h3.style.display = "none";
            }

            function showSubTitle() {
                h3.style.display = "block";
            }

            function showContent() {
                lang = langs[pageLang];

                button = document.getElementById(lang.buttonId);

                var ruleShort = rule.length > 32 ? rule.substr(0, 29) + "..." : rule;
                initButton();

                button.onclick = function () {
                    //window.location.href = "xwall:new-rule/" + rule;
                    button.title = "";
                    button.disabled = true;
                    button.innerHTML = lang.adding;
                    //startTest();

                    require("http://localhost:14220/rule.ashx?new=" + encodeURIComponent(rule), function (done) {
                        if (done) {
                            startTest();
                        }
                        else {
                            initButton();
                            alert(lang.addTimeout);
                        }
                    }, "callback");

                };

                content.style.display = "block";

                function initButton() {
                    button.innerHTML = lang.addAndTry.replace("{rule}", ruleShort);
                    button.title = rule;
                    button.disabled = false;
                }
            }
            
            require("http://config.privoxy.org/show-url-info?url=" + encodeURIComponent(url), function (info) {
                if (!info.rule || info.rule == "online-default") {
                    if (ip != "unknown") {
                        var ipNumbers = [];
                        var ipNumberStrs = ip.split(".");
                        for (var i = 0; i < ipNumberStrs.length; i++) {
                            ipNumbers[i] = Number(ipNumberStrs[i]);
                        }

                        if (
                            ipNumbers[0] == 10 ||
                            (ipNumbers[0] == 172 && ipNumbers[1] >= 16 && ipNumbers[1] <= 31) ||
                            (ipNumbers[0] == 192 && ipNumbers[1] == 168) ||
                            ip == "127.0.0.1"
                        ) {
                            return;
                        }

                        showSubTitle();
                        fetchIpInfo();
                    }
                    else {
                        showContent();
                    }
                }
            }, "callback", "urlInfoCallback");

            function fetchIpInfo() {
                require("http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&ip=" + ip);

                var timer = setInterval(function () {
                    if ("remote_ip_info" in window) {
                        clearInterval(timer);
                        hideSubTitle();
                        if (remote_ip_info && (remote_ip_info.country != "中国" || /香港|台湾/.test(remote_ip_info.province))) {
                            showContent();
                        }
                    }
                }, 100);
            }
        };

        function startTest() {
            button.innerHTML = lang.testing;

            var max = 3;
            var count = 0;

            next();
            function next() {
                if (count++ >= max) {
                    button.innerHTML = lang.doesNotWorkAndRemove;
                    button.disabled = false;

                    button.onclick = function () {
                        require("http://localhost:14220/rule.ashx?del=" + encodeURIComponent(rule), function () { });
                        button.disabled = true;
                        button.innerHTML = lang.sorry;
                    };

                    return;
                }

                var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("MSXML2.XMLHTTP");
                xhr.open("GET", url);
                xhr.setRequestHeader("If-Modified-Since", "0");

                setTimeout(function () {
                    xhr.send(null);
                }, 1000);

                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4 || xhr.readyState == 3 && xhr.responseText.length > 50) {
                        xhr.onreadystatechange = function () { };
                        var text = xhr.responseText;
                        try {
                            xhr.abort();
                        } catch (e) { }

                        if (!/^<![^>]+>\s*<!--PrivoxyMark-->/.test(text)) {
                            //if (toggle) {
                            //    submit(rule, refresh);
                            //}
                            //else {
                            refresh(false);
                            //}
                        }
                        else {
                            next();
                        }
                    }
                };
            }
        }

        //function submit(rule, callback) {
        //    button.innerHTML = lang.workAndSubmitting;
        //    button.disabled = true;

        //    var sender = new Image();
        //    sender.src = "http://vilic.s4.jutuo.net/x-list/submit.ashx?r=" + encodeURIComponent(base64.encode(url));

        //    var called = false;

        //    setTimeout(sender.onerror = sender.onload = function () {
        //        if (called) return;
        //        called = true;
        //        callback(true);
        //    }, 5000);
        //}

        function refresh(submitted) {
            button.innerHTML = submitted ? lang.refreshing : lang.workAndRefreshing;
            button.disabled = true;

            window.location = url;
        }
    })();
</script>